[{"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\configReducer.js":"1","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\configuration\\Configuration.js":"2","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\service\\RestClient.js":"3","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reportWebVitals.js":"4","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\index.js":"5","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\store\\appstore.js":"6","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\Main.js":"7","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\App.js":"8","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\customer\\Customer.js":"9","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\util\\tableUtil.js":"10","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\constants\\AppConstants.js":"11","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\warehouse\\Warehouse.js":"12","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\warehouseReducer.js":"13","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\rootReducer.js":"14","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\empReducer.js":"15","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\customerReducer.js":"16","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\constants\\ActionConstants.js":"17","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\container\\MainContainer.js":"18","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\employee\\Employee.js":"19","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\Auth.js":"20","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\footer\\Footer.js":"21","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\menu\\Menu.js":"22","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\authReducer.js":"23","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\productReducer.js":"24","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\vanReducer.js":"25","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\product\\Product.js":"26","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\van\\Van.js":"27"},{"size":684,"mtime":1622637639846,"results":"28","hashOfConfig":"29"},{"size":12125,"mtime":1623260495555,"results":"30","hashOfConfig":"29"},{"size":1217,"mtime":1622657162843,"results":"31","hashOfConfig":"29"},{"size":375,"mtime":1622565559468,"results":"32","hashOfConfig":"29"},{"size":810,"mtime":1622565559437,"results":"33","hashOfConfig":"29"},{"size":615,"mtime":1622565559500,"results":"34","hashOfConfig":"29"},{"size":2230,"mtime":1622570756899,"results":"35","hashOfConfig":"29"},{"size":230,"mtime":1622565559312,"results":"36","hashOfConfig":"29"},{"size":13341,"mtime":1622565559406,"results":"37","hashOfConfig":"29"},{"size":1836,"mtime":1623259637103,"results":"38","hashOfConfig":"29"},{"size":392,"mtime":1623249837316,"results":"39","hashOfConfig":"29"},{"size":3582,"mtime":1623261035596,"results":"40","hashOfConfig":"29"},{"size":434,"mtime":1623260797382,"results":"41","hashOfConfig":"29"},{"size":638,"mtime":1622565559468,"results":"42","hashOfConfig":"29"},{"size":418,"mtime":1622565559468,"results":"43","hashOfConfig":"29"},{"size":423,"mtime":1622565559453,"results":"44","hashOfConfig":"29"},{"size":470,"mtime":1622565559422,"results":"45","hashOfConfig":"29"},{"size":1315,"mtime":1622565559437,"results":"46","hashOfConfig":"29"},{"size":16415,"mtime":1624212292227,"results":"47","hashOfConfig":"29"},{"size":3125,"mtime":1624208601741,"results":"48","hashOfConfig":"29"},{"size":416,"mtime":1622565559422,"results":"49","hashOfConfig":"29"},{"size":2317,"mtime":1622565559422,"results":"50","hashOfConfig":"29"},{"size":459,"mtime":1624208915153,"results":"51","hashOfConfig":"29"},{"size":418,"mtime":1622565559468,"results":"52","hashOfConfig":"29"},{"size":398,"mtime":1622565559468,"results":"53","hashOfConfig":"29"},{"size":15291,"mtime":1622565559422,"results":"54","hashOfConfig":"29"},{"size":11074,"mtime":1624301621282,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"1lc2s96",{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"59"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"59"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"59"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"59"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"59"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\configReducer.js",["127","128","129","130"],"import {\r\n    SET_APP_CONFIGURATION,\r\n    ADD_NEW_APP_CONFIGURATION,\r\n    IN_PROGRESS\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    configuration: [],\r\n    inProgress: false\r\n};\r\n\r\nfunction configReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_APP_CONFIGURATION:\r\n            return {\r\n                ...state,\r\n                configuration: action.payload\r\n            }\r\n            break;\r\n        \r\n        case IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                inProgress: action.payload\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default configReducer; ",["131","132"],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\configuration\\Configuration.js",["133","134","135","136"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getCall, postCall, deleteCall, putCall } from '../../service/RestClient';\r\nimport { IN_PROGRESS, SET_APP_CONFIGURATION } from '../../constants/ActionConstants';\r\nimport { LIST_APP_CONFIGURATION } from '../../constants/AppConstants';\r\nimport { pageinationOptions, ACTIVE_STATUS_OPTIONS, PROPERTY_TYPES_OPTIONS } from '../../util/tableUtil'\r\nimport { Container, Card, Button, ButtonGroup ,Badge} from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport _ from 'underscore';\r\n\r\nimport { FaFilter, FaPlusCircle, FaSave, FaTrash } from 'react-icons/fa'\r\n\r\nclass Configuration extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [],\r\n            toggleFilter: false\r\n        };\r\n\r\n        this.updateAndSave.bind(this);\r\n        this.deleteAndSave.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listConfiguration();\r\n    }\r\n\r\n    listConfiguration = () => {\r\n        this.props.setInProgress(true);\r\n        getCall(LIST_APP_CONFIGURATION).then(res => {\r\n            if (res.status === 200) {\r\n                this.props.listConfiguration(res.data);                \r\n                this.props.setInProgress(false);\r\n            }\r\n            else {\r\n                this.props.setInProgress(false);\r\n            }\r\n        })\r\n            .catch(exp => {\r\n                this.props.setInProgress(false);\r\n                console.log(exp);\r\n            });\r\n    };\r\n\r\n    addNewEmpltyRecord = () => {\r\n\r\n        this.props.setInProgress(true);\r\n        var configuration = this.props.configuration;\r\n        configuration.unshift({\r\n            propertyId: null,\r\n            propertyType: null,\r\n            propertyValue: null,\r\n            activeStatus: false\r\n        });\r\n        this.props.addNewEmpltyRecord(configuration);\r\n        this.props.setInProgress(false);\r\n    }\r\n\r\n    toggleFilter = () => {\r\n        this.setState({ toggleFilter: !this.state.toggleFilter });\r\n    };\r\n\r\n\r\n    addNewRecord = () => {\r\n\r\n    };\r\n\r\n\r\n    saveAll = () => {\r\n\r\n    };\r\n\r\n    updateAndSave = (cell, row, rowIndex) => {\r\n        this.props.setInProgress(true);\r\n        if (row !== null && row !== undefined) {\r\n            if (row.propertyId === null || row.propertyId === undefined || row.propertyId === \"\") { // add new record\r\n                var data = {};\r\n                data[\"propertyType\"] = row.propertyType;\r\n                data[\"propertyValue\"] = row.propertyValue;\r\n\r\n                var _typeof = typeof row.activeStatus\r\n                if (_typeof === \"string\") {\r\n                    if (row.activeStatus === \"true\") { row.activeStatus = true; }\r\n                    else { row.activeStatus = false };\r\n                }\r\n                data[\"activeStatus\"] = row.activeStatus;\r\n\r\n                postCall(LIST_APP_CONFIGURATION, data).then(res => {\r\n                    if (res.status === 201) {\r\n                        this.listConfiguration();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                    .catch(exp => {\r\n                        this.props.setInProgress(false);\r\n                        console.log(exp);\r\n                    });\r\n            }\r\n            else { // update record\r\n                var data = {};\r\n                data[\"propertyId\"] = row.propertyId;\r\n                data[\"propertyType\"] = row.propertyType;\r\n                data[\"propertyValue\"] = row.propertyValue;\r\n\r\n                var _typeof = typeof row.activeStatus\r\n                if (_typeof === \"string\") {\r\n                    if (row.activeStatus === \"true\") { row.activeStatus = true; }\r\n                    else { row.activeStatus = false };\r\n                }\r\n                data[\"activeStatus\"] = row.activeStatus;\r\n\r\n                putCall(LIST_APP_CONFIGURATION.concat(\"/\").concat(row.propertyId), data).then(res => {\r\n                    if (res.status === 200) {\r\n                        this.listConfiguration();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                    .catch(exp => {\r\n                        this.props.setInProgress(false);\r\n                        console.log(exp);\r\n                    });\r\n            }\r\n\r\n        }\r\n        else { // error\r\n            this.props.setInProgress(false);\r\n        }\r\n    };\r\n\r\n    deleteAndSave = (cell, row, rowIndex) => {\r\n        if (row !== null && row !== undefined) {\r\n            if (row.propertyId === null || row.propertyId === undefined || row.propertyId === \"\") { // delete from cache\r\n                this.listConfiguration();\r\n            }\r\n            else {  // delete from db                \r\n                this.props.setInProgress(true);\r\n                deleteCall(LIST_APP_CONFIGURATION.concat(\"/\").concat(row.propertyId)).then(res => {\r\n                    if (res.status === 200) {\r\n                        this.listConfiguration();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                    .catch(exp => {\r\n                        this.props.setInProgress(false);\r\n                        console.log(exp);\r\n                    });\r\n            }\r\n        }\r\n        else { // error\r\n            this.props.setInProgress(false);\r\n        }\r\n    };\r\n\r\n    actionButton = (cell, row, rowIndex) => {\r\n        return (\r\n            <ButtonGroup size=\"sm\">\r\n                <Button variant=\"success\" size=\"sm\" onClick={() => { this.updateAndSave(cell, row, rowIndex) }}><FaSave /></Button>\r\n                <Button variant=\"danger\" size=\"sm\" onClick={() => { this.deleteAndSave(cell, row, rowIndex) }}><FaTrash /></Button>\r\n            </ButtonGroup>\r\n        )\r\n    };\r\n\r\n    getTableColumn = (data) => {\r\n        if (data !== null && data !== undefined) {\r\n\r\n            var keys = Object.keys(data);\r\n            var columnsArray = keys.map(key => {\r\n\r\n                if (key === 'activeStatus') {\r\n                    return {\r\n                        dataField: key,\r\n                        text: \"STATUS\",\r\n                        sort: true,\r\n                        type: 'bool',\r\n                        editor: {\r\n                            type: Type.CHECKBOX,\r\n                            value: 'true:false'\r\n                        },\r\n                        formatter: (cell) => {\r\n                            return cell ? (<Badge variant=\"success\">ACTIVE</Badge>) : (<Badge variant=\"danger\">INACTIVE</Badge>)\r\n                        },\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }\r\n                else if (key === 'propertyType') {\r\n                    return {\r\n                        dataField: \"propertyType\",\r\n                        text: \"PROPERTY TYPE\",\r\n                        sort: true,\r\n                        editor: {\r\n                            type: Type.SELECT,\r\n                            options: PROPERTY_TYPES_OPTIONS\r\n                        },\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }\r\n                else if(key === 'propertyId'){\r\n                    return {\r\n                        dataField: key,\r\n                        text: \"PROPERTY ID\",\r\n                        sort: true,\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }\r\n                else if(key === 'propertyValue'){\r\n                    return {\r\n                        dataField: key,\r\n                        text: \"PROPERTY VALUE\",\r\n                        sort: true,\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }                \r\n                else {\r\n                    return {\r\n                        dataField: key,\r\n                        text: key,\r\n                        sort: true,\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }\r\n            });\r\n\r\n            columnsArray.push({\r\n                text: \"ACTION\",\r\n                formatter: this.actionButton,\r\n                editable: false\r\n            })\r\n            return columnsArray\r\n        }\r\n        return [];\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"app-container\">\r\n                <Card>\r\n                    <Card.Header as=\"Row\" >Configuration\r\n                    <ButtonGroup size=\"sm\" style={{ float: \"right\", marginBottom: \"2px\" }}>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.addNewEmpltyRecord() }}><FaPlusCircle />  Add New</Button>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.toggleFilter() }}><FaFilter />  Filter</Button>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.saveAll() }}><FaSave />  Save All</Button>\r\n                        </ButtonGroup>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        {\r\n                            this.props.configuration !== undefined && this.props.configuration !== null && this.props.configuration.length > 0 ? (\r\n                                    <div>\r\n                                        <BootstrapTable\r\n                                            keyField=\"propertyId\"\r\n                                            data={this.props.configuration}\r\n                                            columns={this.getTableColumn(this.props.configuration[0])}\r\n                                            striped\r\n                                            hover\r\n                                            condensed\r\n                                            tabIndexCell\r\n                                            bootstrap4\r\n                                            filter={filterFactory()}\r\n                                            pagination={paginationFactory(pageinationOptions(this.props.configuration.length))}\r\n                                            headerWrapperClasses=\"tbl-head\"\r\n                                            cellEdit={cellEditFactory({\r\n                                                mode: 'click',\r\n                                                blurToSave: true\r\n                                            })}\r\n                                            defaultSorted\r\n                                            \r\n                                        />\r\n                                    </div>\r\n                                ) :\r\n                                null\r\n                        }\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInProgress: flag => dispatch({ type: IN_PROGRESS, payload: flag }),\r\n    listConfiguration: data => dispatch({ type: SET_APP_CONFIGURATION, payload: data }),\r\n    addNewEmpltyRecord: data => dispatch({ type: SET_APP_CONFIGURATION, payload: data })\r\n\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inProgress: state.config.inProgress,\r\n    configuration: state.config.configuration,\r\n    loginUser:state.auth.loginUser\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Configuration);","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\service\\RestClient.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reportWebVitals.js",[],["137","138"],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\index.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\store\\appstore.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\Main.js",["139"],"import React ,{Component}from 'react';\r\nimport MainContainer from '../container/MainContainer';\r\nimport Footer from './footer/Footer';\r\nimport Menu from './menu/Menu';\r\nimport Auth from './Auth';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport {Spinner} from 'react-bootstrap';\r\nimport {IN_PROGRESS,SET_APP_CONFIGURATION} from '../constants/ActionConstants';\r\nimport {LIST_APP_CONFIGURATION} from '../constants/AppConstants';\r\nimport { connect } from \"react-redux\";\r\nimport { getCall } from '../service/RestClient';\r\n\r\nclass Main extends Component{\r\n\r\n  componentDidMount(){    \r\n      this.listConfiguration();    \r\n  }\r\n\r\n  \r\n  listConfiguration = () => {\r\n    this.props.setInProgress(true);\r\n    getCall(LIST_APP_CONFIGURATION).then(res => {\r\n        if (res.status === 200) {\r\n            this.props.listConfiguration(res.data);\r\n            this.props.setInProgress(false);\r\n        }\r\n        else {\r\n            this.props.setInProgress(false);\r\n        }\r\n    })\r\n        .catch(exp => {\r\n            this.props.setInProgress(false);\r\n            console.log(exp);\r\n        });\r\n};\r\n\r\n  render() {\r\n    return (\r\n      <div> \r\n          <BrowserRouter>\r\n          {  /*{this.props.loginUser.token===undefined ? <Auth></Auth>: */ }\r\n            <div>\r\n              <div><Menu></Menu></div>        \r\n              <div><MainContainer></MainContainer></div>\r\n              <div><Footer></Footer></div>  \r\n                     \r\n            {  this.props.inProgress ?            \r\n            <div id=\"bd\" className=\"bd\">\r\n            <Spinner animation=\"border\" variant=\"warning\" className=\"center-pos\" ><span className=\"sr-only\">Loading...</span></Spinner>\r\n            </div>\r\n            :null\r\n            }\r\n            </div>\r\n        { /*}*/ }\r\n          </BrowserRouter>         \r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps=(dispatch) =>({ \r\n  setInProgress: flag =>  dispatch({type:IN_PROGRESS,payload:flag}),\r\n  listConfiguration: data => dispatch({ type: SET_APP_CONFIGURATION, payload: data })        \r\n});\r\nconst mapStateToProps = (state) => ({\r\ninProgress:state.config.inProgress,\r\nloginUser:state.auth.loginUser\r\n});\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Main);\r\n","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\App.js",["140"],"import React,{Component} from 'react';\r\nimport Main from './components/Main';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">      \r\n      <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["141","142"],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\customer\\Customer.js",["143","144","145"],"import React, { Component } from 'react';\r\nimport { getCall, putCall, postCall, deleteCall } from '../../service/RestClient';\r\nimport { Container, Card, Button, ButtonGroup , Badge } from 'react-bootstrap';\r\nimport { IN_PROGRESS } from '../../constants/ActionConstants';\r\nimport { connect } from \"react-redux\";\r\nimport { LIST_CUSTOMER } from '../../constants/AppConstants';\r\nimport { SET_CUSTOMER } from '../../constants/ActionConstants';\r\n\r\nimport { pageinationOptions, ACTIVE_STATUS_OPTIONS } from '../../util/tableUtil'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport _ from 'underscore';\r\n\r\nimport { FaFilter, FaPlusCircle, FaSave, FaTrash } from 'react-icons/fa'\r\n\r\nclass Customer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [],\r\n            toggleFilter: false\r\n        };\r\n\r\n        this.updateAndSave.bind(this);\r\n        this.deleteAndSave.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listCustomer();\r\n    }\r\n\r\n    listCustomer = () => {\r\n        this.props.setInProgress(true);\r\n        getCall(LIST_CUSTOMER).then(res => {\r\n            if (res.status === 200) {\r\n                this.props.listCustomer(res.data);\r\n                this.props.setInProgress(false);\r\n            }\r\n            else {\r\n                this.props.setInProgress(false);\r\n            }\r\n        })\r\n        .catch(exp => {\r\n            this.props.setInProgress(false);\r\n            console.log(exp);\r\n        });\r\n    };\r\n\r\n\r\n    getConfiguration = (type) => {\r\n        var array = _.filter(this.props.configuration.data, function (object) { return object.PROPERTY_TYPE === type; });\r\n        return _.map(array, function (object) {\r\n           return { value: object.PROPERTY_ID, label: object.PROPERTY_VALUE };\r\n        });\r\n    }\r\n\r\n    addNewEmpltyRecord = () => {\r\n\r\n        this.props.setInProgress(true);\r\n        var customerData = this.props.customer;\r\n        customerData.data.unshift({            \r\n                CUST_ID: null,\r\n                CUST_NAME: null,\r\n                SHOP_NAME: null,\r\n                CUST_CONTACT: null,\r\n                CUST_GST_NO: null,\r\n                CUST_ADDRESS: null,\r\n                OUTSTANDING: null,\r\n                CUST_DOB: null,\r\n                ACTIVE_STATUS: false\r\n        });\r\n        this.props.addNewEmpltyRecord(customerData);\r\n        this.props.setInProgress(false);\r\n    }\r\n\r\n    toggleFilter = () => {\r\n        this.setState({ toggleFilter: !this.state.toggleFilter });\r\n    };\r\n\r\n    updateAndSave = (cell, row, rowIndex) => {\r\n        this.props.setInProgress(true);\r\n        if (row !== null && row !== undefined) {\r\n            if (row.CUST_ID === null || row.CUST_ID === undefined || row.CUST_ID === \"\") { // add new record\r\n                var data = {};    \r\n                \r\n                data[\"CUST_ID\"] = row.CUST_ID;\r\n                data[\"CUST_NAME\"] = row.CUST_NAME;\r\n                data[\"SHOP_NAME\"] = row.SHOP_NAME;\r\n                data[\"CUST_CONTACT\"] = row.CUST_CONTACT;\r\n                data[\"CUST_GST_NO\"] = row.CUST_GST_NO;\r\n                data[\"CUST_ADDRESS\"] = row.CUST_ADDRESS;\r\n                data[\"OUTSTANDING\"] = row.OUTSTANDING;\r\n                data[\"CUST_DOB\"] = row.CUST_DOB;                \r\n                data[\"ACTIVE_STATUS\"] = false;\r\n\r\n                var _typeof = typeof row.ACTIVE_STATUS\r\n                if (_typeof === \"string\") {\r\n                    if (row.ACTIVE_STATUS === \"true\") { row.ACTIVE_STATUS = true; }\r\n                    else { row.ACTIVE_STATUS = false };\r\n                }\r\n                data[\"ACTIVE_STATUS\"] = row.ACTIVE_STATUS;\r\n\r\n                postCall(LIST_CUSTOMER, data).then(res => {\r\n                    if (res.status === 201) {\r\n                        this.listCustomer();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                .catch(exp => {\r\n                    this.props.setInProgress(false);\r\n                    console.log(exp);\r\n                });\r\n            }\r\n            else { // update record\r\n                var data = {};\r\n\r\n                data[\"CUST_ID\"] = row.CUST_ID;\r\n                data[\"CUST_NAME\"] = row.CUST_NAME;\r\n                data[\"SHOP_NAME\"] = row.SHOP_NAME;\r\n                data[\"CUST_CONTACT\"] = row.CUST_CONTACT;\r\n                data[\"CUST_GST_NO\"] = row.CUST_GST_NO;\r\n                data[\"CUST_ADDRESS\"] = row.CUST_ADDRESS;\r\n                data[\"OUTSTANDING\"] = row.OUTSTANDING;\r\n                data[\"CUST_DOB\"] = row.CUST_DOB;                \r\n                data[\"ACTIVE_STATUS\"] = false;\r\n\r\n                var _typeof = typeof row.ACTIVE_STATUS\r\n                if (_typeof === \"string\") {\r\n                    if (row.ACTIVE_STATUS === \"true\") { row.ACTIVE_STATUS = true; }\r\n                    else { row.ACTIVE_STATUS = false };\r\n                }\r\n                data[\"ACTIVE_STATUS\"] = row.ACTIVE_STATUS;\r\n\r\n                putCall(LIST_CUSTOMER.concat(\"/\").concat(row.EMP_ID), data).then(res => {\r\n                    if (res.status === 200) {\r\n                        this.listCustomer();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                .catch(exp => {\r\n                    this.props.setInProgress(false);\r\n                    console.log(exp);\r\n                });\r\n            }\r\n        }\r\n        else { // error\r\n            this.props.setInProgress(false);\r\n        }\r\n    };\r\n\r\n    deleteAndSave = (cell, row, rowIndex) => {\r\n        if (row !== null && row !== undefined) {\r\n            if (row.PRODUCT_ID === null || row.PRODUCT_ID === undefined || row.PRODUCT_ID === \"\") { // delete from cache\r\n                this.listCustomer();\r\n            }\r\n            else {  // delete from db                \r\n                this.props.setInProgress(true);\r\n                deleteCall(LIST_CUSTOMER.concat(\"/\").concat(row.PRODUCT_ID)).then(res => {\r\n                    if (res.status === 200) {\r\n                        this.listCustomer();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                .catch(exp => {\r\n                    this.props.setInProgress(false);\r\n                    console.log(exp);\r\n                });\r\n            }\r\n        }\r\n        else { // error\r\n            this.props.setInProgress(false);\r\n        }\r\n    };\r\n\r\n    saveAll = () => { };\r\n\r\n    actionButton = (cell, row, rowIndex) => {\r\n        return (\r\n            <ButtonGroup size=\"sm\">\r\n                <Button variant=\"success\" size=\"sm\" onClick={() => { this.updateAndSave(cell, row, rowIndex) }}><FaSave /></Button>\r\n                <Button variant=\"danger\" size=\"sm\" onClick={() => { this.deleteAndSave(cell, row, rowIndex) }}><FaTrash /></Button>\r\n            </ButtonGroup>\r\n        )\r\n    };\r\n\r\n    getTableColumn = (data) => {\r\n        if (data !== null && data !== undefined) {\r\n            var keys = Object.keys(data);\r\n\r\n            var columnsArray = keys.map(key => {\r\n                \r\n                 if(key === 'ACTIVE_STATUS'){\r\n                    return {\r\n                    dataField: key,\r\n                    text: 'STATUS',\r\n                    sort: true,\r\n                    type:'bool',\r\n                    editor :{\r\n                        type: Type.CHECKBOX,\r\n                        value: 'true:false'\r\n                    },\r\n                    formatter : (cell)=>{  \r\n                        return cell ? (<Badge variant=\"success\">Active</Badge>) : (<Badge variant=\"danger\">InActive</Badge>)\r\n                    },\r\n                    filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }\r\n                else if (key === 'CUST_DOB') {\r\n                    return {\r\n                        dataField: key,\r\n                        text: key,\r\n                        type:'date',\r\n                        filter: this.state.toggleFilter ? textFilter() : false,                        \r\n                        sort: true,\r\n                        headerStyle: () => {\r\n                            return { width: \"10%\" };\r\n                        },\r\n                        editor: {\r\n                            type: Type.DATE\r\n                        },\r\n                        formatter: (cell, row, rowIndex) => {\r\n                            \r\n                            var date = new Date(cell);\r\n                            var yyyy = date.getFullYear();\r\n                            var mm = date.getMonth() + 1;\r\n                            if (mm < 10) {\r\n                                mm = '0' + mm;\r\n                            }\r\n                            var dd = date.getDate();\r\n                            if (dd < 10) {\r\n                                dd = '0' + dd;\r\n                            }\r\n                            var ndt = yyyy + \"-\" + mm + \"-\" + dd;\r\n                            return ndt;\r\n                        },\r\n                        editable: true\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        dataField: key,\r\n                        text: key,\r\n                        sort: true,\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    }\r\n                }\r\n            }\r\n            );\r\n\r\n            columnsArray.push({\r\n                text: \"ACTION\",\r\n                formatter: this.actionButton,\r\n                editable: false,\r\n                headerStyle: () => {\r\n                    return { width: \"6%\" };\r\n                },\r\n            });\r\n\r\n            return columnsArray\r\n        }\r\n        return [];\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"app-container\">\r\n                <Card>\r\n                    <Card.Header as=\"span\">customer\r\n                    <ButtonGroup size=\"sm\" style={{ float: \"right\", marginBottom: \"2px\" }}>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.addNewEmpltyRecord() }}><FaPlusCircle />  Add New</Button>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.toggleFilter() }}><FaFilter />  Filter</Button>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.saveAll() }}><FaSave />  Save All</Button>\r\n                        </ButtonGroup>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n\r\n                        {\r\n                            this.props.customer !== undefined && this.props.customer !== null &&\r\n                                this.props.customer.data !== undefined && this.props.customer.data !== null ? (\r\n                                    <div>\r\n                                        <BootstrapTable\r\n                                            keyField=\"CUST_ID\"\r\n                                            data={this.props.customer.data}\r\n                                            columns={this.getTableColumn(this.props.customer.data[0])}\r\n                                            striped\r\n                                            bootstrap4\r\n                                            hover\r\n                                            condensed\r\n                                            tabIndexCell\r\n                                            filter={filterFactory()}\r\n                                            pagination={paginationFactory(pageinationOptions(this.props.customer.data.length))}\r\n                                            headerWrapperClasses=\"tbl-head\"\r\n                                            cellEdit={cellEditFactory({\r\n                                                mode: 'click',\r\n                                                blurToSave: true\r\n                                            })}\r\n                                        />\r\n                                    </div>\r\n                                ) :\r\n                                null\r\n                        }\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInProgress: flag => dispatch({ type: IN_PROGRESS, payload: flag }),\r\n    listCustomer: data => dispatch({ type: SET_CUSTOMER, payload: data }),\r\n    addNewEmpltyRecord: data => dispatch({ type: SET_CUSTOMER, payload: data })\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inProgress: state.config.inProgress,\r\n    configuration: state.config.configuration,\r\n    customer: state.customer.customer\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customer);","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\util\\tableUtil.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\constants\\AppConstants.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\warehouse\\Warehouse.js",["146"],"import React,{Component} from 'react';\r\nimport { getCall } from '../../service/RestClient';\r\nimport { Container, Card, Button, Table } from 'react-bootstrap';\r\nimport { IN_PROGRESS } from '../../constants/ActionConstants';\r\nimport { connect } from \"react-redux\";\r\nimport { LIST_WAREHOUSE } from '../../constants/AppConstants';\r\nimport { SET_WAREHOUSE } from '../../constants/ActionConstants';\r\n\r\nclass Warehouse extends Component{\r\n\r\n    componentDidMount() {\r\n        this.listWarehouse();\r\n    }\r\n\r\n    listWarehouse = () => {\r\n        this.props.setInProgress(true);\r\n        getCall(LIST_WAREHOUSE).then(res => {\r\n            if (res.status === 200) {\r\n                this.props.listWarehouse(res.data);\r\n                this.props.setInProgress(false);\r\n            }\r\n            else {\r\n                this.props.setInProgress(false);\r\n            }\r\n        })\r\n            .catch(exp => {\r\n                this.props.setInProgress(false);\r\n                console.log(exp);\r\n            });\r\n    };\r\n\r\n    render(){\r\n        return ( \r\n        <Container fluid className=\"app-container\">\r\n        <Card>\r\n            <Card.Header as=\"span\">Warehouse</Card.Header>\r\n            <Card.Body>\r\n            {\r\n                            this.props.warehouse !== undefined && this.props.warehouse !== null ? (\r\n                                    <Table responsive striped bordered hover size=\"sm\" >\r\n                                        <thead>\r\n                                            <tr>\r\n                                            <th>Warehouse Id</th>\r\n                                            <th>Warehouse Name</th>\r\n                                            <th>Warehouse Address</th>\r\n                                            <th>Warehouse Contact</th>\r\n                                            <th>Active Status</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.props.warehouse.map((data, i) => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>{data.warehouseId}</td>\r\n                                                        <td>{data.warehouseName}</td>\r\n                                                        <td>{data.warehouseAddress}</td>       \r\n                                                        <td>{data.warehouseContact}</td>                                                   \r\n                                                        <td>{data.activeStatus ? \"Active\" : \"Inactive\"}</td>\r\n                                                    </tr>)\r\n                                            })\r\n                                            }\r\n                                        </tbody>\r\n                                    </Table>\r\n                                ) :\r\n                                null\r\n                        }\r\n            </Card.Body>    \r\n        </Card>\r\n        </Container>\r\n        );\r\n    }\r\n    \r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInProgress: flag => dispatch({ type: IN_PROGRESS, payload: flag }),\r\n    listWarehouse: data => dispatch({ type: SET_WAREHOUSE, payload: data })\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inProgress: state.config.inProgress,\r\n    warehouse: state.warehouse.warehouse\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Warehouse);","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\warehouseReducer.js",["147","148"],"import {\r\n    SET_WAREHOUSE\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    warehouse: []\r\n};\r\n\r\nfunction warehouseReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_WAREHOUSE:\r\n            return {\r\n                ...state,\r\n                warehouse: action.payload\r\n            }\r\n            break;       \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default warehouseReducer; ","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\rootReducer.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\empReducer.js",["149","150"],"import {\r\n    SET_EMPLOYEE\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    employee: []\r\n};\r\n\r\nfunction empReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                employee: action.payload\r\n            }\r\n            break;       \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default empReducer; ","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\customerReducer.js",["151","152"],"import {\r\n    SET_CUSTOMER\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    van: []\r\n};\r\n\r\nfunction customerReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CUSTOMER:\r\n            return {\r\n                ...state,\r\n                customer: action.payload\r\n            }\r\n            break;       \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default customerReducer; ","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\constants\\ActionConstants.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\container\\MainContainer.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\employee\\Employee.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\Auth.js",["153","154","155","156","157","158","159"],"import React, { Component } from 'react';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Spinner , Form , Col , Row ,Button} from 'react-bootstrap';\r\nimport { IN_PROGRESS, SET_LOGIN_USER } from '../constants/ActionConstants';\r\nimport { LOGIN } from '../constants/AppConstants';\r\nimport { connect } from \"react-redux\";\r\nimport { postCall } from '../service/RestClient';\r\n\r\nclass Auth extends Component {\r\n\r\n    constructor(props){\r\n        super();\r\n\r\n        this.state ={\r\n            username:\"\",\r\n            password:\"\"\r\n        }\r\n    }\r\n\r\n\r\n    doLogin = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        this.props.setInProgress(true);\r\n\r\n        const data={\r\n            username:this.state.username,\r\n            password:this.state.password\r\n        };\r\n\r\n        /*\r\n        postCall(LOGIN, data).then(res => {\r\n            if (res.status === 200) {\r\n        \r\n                this.props.setLoginUser(res.data);\r\n                this.props.setInProgress(false);\r\n            }\r\n            else {\r\n                this.props.setInProgress(false);\r\n            }\r\n        })\r\n            .catch(exp => {\r\n                this.props.setInProgress(false);\r\n                console.log(exp);\r\n            });\r\n        */\r\n\r\n            this.props.setLoginUser({EMP_NAME:\"ADMIN\",EMP_ROLE:\"admin\"});\r\n            this.props.setInProgress(false);\r\n    };\r\n\r\n\r\n    handleChange=(event)=>{\r\n        this.setState({[event.target.id]: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <div>\r\n                        <br/>\r\n                        <form onSubmit={this.doLogin}>\r\n                        <label>User Name</label> <br/>\r\n                        <input type=\"text\" data-test=\"username\" value={this.state.username} id=\"username\" onChange={this.handleChange} /><br/>\r\n                        <label>Password</label> <br/>\r\n                        <input type=\"password\" data-test=\"password\" value={this.state.password} id=\"password\" onChange={this.handleChange } /><br/><br/>\r\n                        <input type=\"submit\" value=\"Log In\" data-test=\"submit\" />\r\n                        </form>\r\n\r\n                         \r\n                    </div>\r\n                    {\r\n                        this.props.inProgress ?\r\n                            <div id=\"bd\" className=\"bd\">\r\n                                <Spinner animation=\"border\" variant=\"warning\" className=\"center-pos\" ><span className=\"sr-only\">Loading...</span></Spinner>\r\n                            </div>\r\n                            : null\r\n                    }\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInProgress: flag => dispatch({ type: IN_PROGRESS, payload: flag }),\r\n    setLoginUser: data => dispatch({ type: SET_LOGIN_USER, payload: data })\r\n});\r\nconst mapStateToProps = (state) => ({\r\n    inProgress: state.config.inProgress,\r\n    loginUser: state.auth.loginUser\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\footer\\Footer.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\menu\\Menu.js",[],"C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\authReducer.js",["160","161"],"import {\r\n    SET_LOGIN_USER\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    loginUser: {EMP_NAME:\"ADMIN\",EMP_ROLE:\"admin\"}\r\n};\r\n\r\nfunction authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_LOGIN_USER:\r\n            return {\r\n                ...state,\r\n                loginUser: action.payload\r\n            }\r\n            break;       \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default authReducer; ","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\productReducer.js",["162","163"],"import {\r\n    SET_PRODUCT\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    van: []\r\n};\r\n\r\nfunction productReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_PRODUCT:\r\n            return {\r\n                ...state,\r\n                product: action.payload\r\n            }\r\n            break;       \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default productReducer; ","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\reducers\\vanReducer.js",["164","165"],"import {\r\n    SET_VAN\r\n} from '../constants/ActionConstants';\r\n\r\nconst initialState = {\r\n    van: []\r\n};\r\n\r\nfunction vanReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_VAN:\r\n            return {\r\n                ...state,\r\n                van: action.payload\r\n            }\r\n            break;       \r\n    }\r\n    return state;\r\n}\r\n\r\nexport default vanReducer; ","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\product\\Product.js",["166","167","168","169","170"],"import React, { Component } from 'react';\r\nimport { getCall, putCall, postCall, deleteCall } from '../../service/RestClient';\r\nimport { Container, Card, Button, ButtonGroup , Badge } from 'react-bootstrap';\r\nimport { IN_PROGRESS } from '../../constants/ActionConstants';\r\nimport { connect } from \"react-redux\";\r\nimport { LIST_PRODUCT } from '../../constants/AppConstants';\r\nimport { SET_PRODUCT } from '../../constants/ActionConstants';\r\n\r\nimport { pageinationOptions, ACTIVE_STATUS_OPTIONS } from '../../util/tableUtil'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\nimport _ from 'underscore';\r\n\r\nimport { FaFilter, FaPlusCircle, FaSave, FaTrash } from 'react-icons/fa'\r\n\r\nclass Product extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [],\r\n            toggleFilter: false\r\n        };\r\n\r\n        this.updateAndSave.bind(this);\r\n        this.deleteAndSave.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listProduct();\r\n    }\r\n\r\n    listProduct = () => {\r\n        this.props.setInProgress(true);\r\n        getCall(LIST_PRODUCT).then(res => {\r\n            if (res.status === 200) {\r\n                this.props.listProduct(res.data);\r\n                this.props.setInProgress(false);\r\n            }\r\n            else {\r\n                this.props.setInProgress(false);\r\n            }\r\n        })\r\n        .catch(exp => {\r\n            this.props.setInProgress(false);\r\n            console.log(exp);\r\n        });\r\n    };\r\n\r\n\r\n    getConfiguration = (type) => {\r\n        var array = _.filter(this.props.configuration.data, function (object) { return object.PROPERTY_TYPE === type; });\r\n        return _.map(array, function (object) {\r\n           return { value: object.PROPERTY_ID, label: object.PROPERTY_VALUE };\r\n        });\r\n    }\r\n\r\n    addNewEmpltyRecord = () => {\r\n\r\n        this.props.setInProgress(true);\r\n        var productData = this.props.product;\r\n        productData.data.unshift({\r\n            PRODUCT_ID : null,\r\n            PRODUCT_CODE : null,\r\n            PRODUCT_NAME : null,\r\n            HSN_CODE : null,\r\n            PRODUCT_DESC : null,\r\n            PROD_COMPANY_ID: null,\r\n            PROD_UNIT_ID : null,\r\n            PROD_UNIT_QUANTITY : null,\r\n            PRODUCT_MRP: null,\r\n            PROD_CGST_PER: null,\r\n            PROD_SGST_PER: null,\r\n            PRODUCT_RATE: null,\r\n            ACTIVE_STATUS: false\r\n        });\r\n        this.props.addNewEmpltyRecord(productData);\r\n        this.props.setInProgress(false);\r\n    }\r\n\r\n    toggleFilter = () => {\r\n        this.setState({ toggleFilter: !this.state.toggleFilter });\r\n    };\r\n\r\n    updateAndSave = (cell, row, rowIndex) => {\r\n        this.props.setInProgress(true);\r\n        if (row !== null && row !== undefined) {\r\n            if (row.PRODUCT_ID === null || row.PRODUCT_ID === undefined || row.PRODUCT_ID === \"\") { // add new record\r\n                var data = {};        \r\n\r\n                data[\"PRODUCT_ID\"] = row.PRODUCT_ID;\r\n                data[\"PRODUCT_CODE\"] = row.PRODUCT_CODE;\r\n                data[\"PRODUCT_NAME\"] = row.PRODUCT_NAME;\r\n                data[\"HSN_CODE\"] = row.HSN_CODE;\r\n                data[\"PRODUCT_DESC\"] = row.PRODUCT_DESC;\r\n                data[\"PROD_COMPANY_ID\"] = row.PROD_COMPANY_ID;\r\n                data[\"PROD_UNIT_ID\"] = row.PROD_UNIT_ID;\r\n                data[\"PROD_UNIT_QUANTITY\"] = parseInt(row.PROD_UNIT_QUANTITY);\r\n                data[\"PRODUCT_MRP\"] = parseFloat(row.PRODUCT_MRP);\r\n                data[\"PROD_CGST_PER\"] = parseFloat(row.PROD_CGST_PER);\r\n                data[\"PROD_SGST_PER\"] = parseFloat(row.PROD_SGST_PER);\r\n                data[\"PRODUCT_RATE\"] = row.PRODUCT_RATE;\r\n                data[\"ACTIVE_STATUS\"] = false;\r\n\r\n                var _typeof = typeof row.ACTIVE_STATUS\r\n                if (_typeof === \"string\") {\r\n                    if (row.ACTIVE_STATUS === \"true\") { row.ACTIVE_STATUS = true; }\r\n                    else { row.ACTIVE_STATUS = false };\r\n                }\r\n                data[\"ACTIVE_STATUS\"] = row.ACTIVE_STATUS;\r\n\r\n                postCall(LIST_PRODUCT, data).then(res => {\r\n                    if (res.status === 201) {\r\n                        this.listProduct();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                .catch(exp => {\r\n                    this.props.setInProgress(false);\r\n                    console.log(exp);\r\n                });\r\n            }\r\n            else { // update record\r\n                var data = {};\r\n\r\n                data[\"PRODUCT_ID\"] = row.PRODUCT_ID;\r\n                data[\"PRODUCT_CODE\"] = row.PRODUCT_CODE;\r\n                data[\"PRODUCT_NAME\"] = row.PRODUCT_NAME;\r\n                data[\"HSN_CODE\"] = row.HSN_CODE;\r\n                data[\"PRODUCT_DESC\"] = row.PRODUCT_DESC;\r\n                data[\"PROD_COMPANY_ID\"] = row.PROD_COMPANY_ID;\r\n                data[\"PROD_UNIT_ID\"] = row.PROD_UNIT_ID;\r\n                data[\"PROD_UNIT_QUANTITY\"] = parseInt(row.PROD_UNIT_QUANTITY);\r\n                data[\"PRODUCT_MRP\"] = parseFloat(row.PRODUCT_MRP);\r\n                data[\"PROD_CGST_PER\"] = parseFloat(row.PROD_CGST_PER);\r\n                data[\"PROD_SGST_PER\"] = parseFloat(row.PROD_SGST_PER);\r\n                data[\"PRODUCT_RATE\"] = [];\r\n                data[\"ACTIVE_STATUS\"] = false;\r\n\r\n                var _typeof = typeof row.ACTIVE_STATUS\r\n                if (_typeof === \"string\") {\r\n                    if (row.ACTIVE_STATUS === \"true\") { row.ACTIVE_STATUS = true; }\r\n                    else { row.ACTIVE_STATUS = false };\r\n                }\r\n                data[\"ACTIVE_STATUS\"] = row.ACTIVE_STATUS;\r\n\r\n                putCall(LIST_PRODUCT.concat(\"/\").concat(row.EMP_ID), data).then(res => {\r\n                    if (res.status === 200) {\r\n                        this.listProduct();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                .catch(exp => {\r\n                    this.props.setInProgress(false);\r\n                    console.log(exp);\r\n                });\r\n            }\r\n        }\r\n        else { // error\r\n            this.props.setInProgress(false);\r\n        }\r\n    };\r\n\r\n    deleteAndSave = (cell, row, rowIndex) => {\r\n        if (row !== null && row !== undefined) {\r\n            if (row.PRODUCT_ID === null || row.PRODUCT_ID === undefined || row.PRODUCT_ID === \"\") { // delete from cache\r\n                this.listProduct();\r\n            }\r\n            else {  // delete from db                \r\n                this.props.setInProgress(true);\r\n                deleteCall(LIST_PRODUCT.concat(\"/\").concat(row.PRODUCT_ID)).then(res => {\r\n                    if (res.status === 200) {\r\n                        this.listProduct();\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                    else {\r\n                        this.props.setInProgress(false);\r\n                    }\r\n                })\r\n                .catch(exp => {\r\n                    this.props.setInProgress(false);\r\n                    console.log(exp);\r\n                });\r\n            }\r\n        }\r\n        else { // error\r\n            this.props.setInProgress(false);\r\n        }\r\n    };\r\n\r\n    saveAll = () => { };\r\n\r\n    actionButton = (cell, row, rowIndex) => {\r\n        return (\r\n            <ButtonGroup size=\"sm\">\r\n                <Button variant=\"success\" size=\"sm\" onClick={() => { this.updateAndSave(cell, row, rowIndex) }}><FaSave /></Button>\r\n                <Button variant=\"danger\" size=\"sm\" onClick={() => { this.deleteAndSave(cell, row, rowIndex) }}><FaTrash /></Button>\r\n            </ButtonGroup>\r\n        )\r\n    };\r\n\r\n    getTableColumn = (data) => {\r\n        if (data !== null && data !== undefined) {\r\n            var keys = Object.keys(data);\r\n\r\n            var columnsArray = keys.map(key => {\r\n                if (key === 'PROD_UNIT_ID' || key === 'PROD_COMPANY_ID') {\r\n\r\n                    var obj = {\r\n                        dataField: key,\r\n                        text: key=='PROD_UNIT_ID'? 'UNIT' : 'COMPANY',\r\n                        sort: true,\r\n                        filter: this.state.toggleFilter ? textFilter() : false,\r\n                        editor: {\r\n                            type: Type.SELECT\r\n                        },                        \r\n                        formatter : (cell)=>{  \r\n                                                         \r\n                            if(cell !== undefined && cell !==null && cell !==\"\"){                          \r\n                            \r\n                            var option=_.find(obj.editor.options,function(opn){                                  \r\n                                return opn.value==cell;                                \r\n                            }); \r\n\r\n                            if(option!==undefined)           \r\n                            return (option.label);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    if (key === 'PROD_UNIT_ID') {\r\n                        obj.editor.options = this.getConfiguration(\"UNIT\");                        \r\n                    }\r\n                    else if (key === 'PROD_COMPANY_ID') {\r\n                        obj.editor.options = this.getConfiguration(\"COMPANY\");\r\n                    }                    \r\n                    return obj;\r\n                }\r\n                else if(key === 'ACTIVE_STATUS'){\r\n                    return {\r\n                    dataField: key,\r\n                    text: 'STATUS',\r\n                    sort: true,\r\n                    type:'bool',\r\n                    editor :{\r\n                        type: Type.CHECKBOX,\r\n                        value: 'true:false'\r\n                    },\r\n                    formatter : (cell)=>{  \r\n                        return cell ? (<Badge variant=\"success\">Active</Badge>) : (<Badge variant=\"danger\">InActive</Badge>)\r\n                    },\r\n                    filter: this.state.toggleFilter ? textFilter() : false\r\n                    };\r\n                }\r\n                else if(key === 'PRODUCT_RATE'){\r\n                    return {\r\n                    dataField: key,\r\n                    text: key,\r\n                    sort: true,                    \r\n                    \r\n                    formatter : (cell)=>{ \r\n                        \r\n                    //    var html= _.map(cell,function(item){\r\n                    //     return(<div>\r\n                    //             <input value={item.RATE}/>\r\n                    //             <input value={item.PRICE}/>\r\n                    //            </div>)\r\n                    //     })                  \r\n                        \r\n                    //      return html;\r\n\r\n                     return JSON.stringify(cell)\r\n                    },                    \r\n                    filter: this.state.toggleFilter ? textFilter() : false,\r\n                    editor:{\r\n                        type:Type.TEXTAREA\r\n                    },\r\n                    editable:false\r\n                    \r\n\r\n                    };\r\n                }\r\n               \r\n                else {\r\n                    return {\r\n                        dataField: key,\r\n                        text: key,\r\n                        sort: true,\r\n                        filter: this.state.toggleFilter ? textFilter() : false\r\n                    }\r\n                }\r\n            }\r\n            );\r\n\r\n            columnsArray.push({\r\n                text: \"ACTION\",\r\n                formatter: this.actionButton,\r\n                editable: false,\r\n                headerStyle: () => {\r\n                    return { width: \"6%\" };\r\n                },\r\n            });\r\n\r\n            return columnsArray\r\n        }\r\n        return [];\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"app-container\">\r\n                <Card>\r\n                    <Card.Header as=\"span\">Product\r\n                    <ButtonGroup size=\"sm\" style={{ float: \"right\", marginBottom: \"2px\" }}>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.addNewEmpltyRecord() }}><FaPlusCircle />  Add New</Button>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.toggleFilter() }}><FaFilter />  Filter</Button>\r\n                            <Button variant=\"success\" size=\"sm\" onClick={() => { this.saveAll() }}><FaSave />  Save All</Button>\r\n                        </ButtonGroup>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n\r\n                        {\r\n                            this.props.product !== undefined && this.props.product !== null &&\r\n                                this.props.product.data !== undefined && this.props.product.data !== null ? (\r\n                                    <div>\r\n                                        <BootstrapTable\r\n                                            keyField=\"PRODUCT_ID\"\r\n                                            data={this.props.product.data}\r\n                                            columns={this.getTableColumn(this.props.product.data[0])}\r\n                                            striped\r\n                                            bootstrap4\r\n                                            hover\r\n                                            condensed\r\n                                            tabIndexCell\r\n                                            filter={filterFactory()}\r\n                                            pagination={paginationFactory(pageinationOptions(this.props.product.data.length))}\r\n                                            headerWrapperClasses=\"tbl-head\"\r\n                                            cellEdit={cellEditFactory({\r\n                                                mode: 'click',\r\n                                                blurToSave: true\r\n                                            })}\r\n                                        />\r\n                                    </div>\r\n                                ) :\r\n                                null\r\n                        }\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInProgress: flag => dispatch({ type: IN_PROGRESS, payload: flag }),\r\n    listProduct: data => dispatch({ type: SET_PRODUCT, payload: data }),\r\n    addNewEmpltyRecord: data => dispatch({ type: SET_PRODUCT, payload: data })\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    inProgress: state.config.inProgress,\r\n    configuration: state.config.configuration,\r\n    product: state.product.product\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Product);","C:\\Users\\lecom\\dev\\MyProjects\\van-distribution\\v1\\van-distribution-app\\src\\components\\van\\Van.js",[],{"ruleId":"171","severity":1,"message":"172","line":3,"column":5,"nodeType":"173","messageId":"174","endLine":3,"endColumn":30},{"ruleId":"175","severity":1,"message":"176","line":13,"column":5,"nodeType":"177","messageId":"178","endLine":27,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":19,"column":13,"nodeType":"181","messageId":"182","endLine":19,"endColumn":19},{"ruleId":"179","severity":1,"message":"180","line":26,"column":13,"nodeType":"181","messageId":"182","endLine":26,"endColumn":19},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"171","severity":1,"message":"187","line":6,"column":30,"nodeType":"173","messageId":"174","endLine":6,"endColumn":51},{"ruleId":"171","severity":1,"message":"188","line":12,"column":8,"nodeType":"173","messageId":"174","endLine":12,"endColumn":9},{"ruleId":"189","severity":1,"message":"190","line":108,"column":21,"nodeType":"173","messageId":"191","endLine":108,"endColumn":25},{"ruleId":"189","severity":1,"message":"192","line":113,"column":21,"nodeType":"173","messageId":"191","endLine":113,"endColumn":28},{"ruleId":"183","replacedBy":"193"},{"ruleId":"185","replacedBy":"194"},{"ruleId":"171","severity":1,"message":"195","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":12},{"ruleId":"171","severity":1,"message":"196","line":1,"column":15,"nodeType":"173","messageId":"174","endLine":1,"endColumn":24},{"ruleId":"183","replacedBy":"197"},{"ruleId":"185","replacedBy":"198"},{"ruleId":"171","severity":1,"message":"187","line":9,"column":30,"nodeType":"173","messageId":"174","endLine":9,"endColumn":51},{"ruleId":"189","severity":1,"message":"190","line":121,"column":21,"nodeType":"173","messageId":"191","endLine":121,"endColumn":25},{"ruleId":"189","severity":1,"message":"192","line":133,"column":21,"nodeType":"173","messageId":"191","endLine":133,"endColumn":28},{"ruleId":"171","severity":1,"message":"199","line":3,"column":27,"nodeType":"173","messageId":"174","endLine":3,"endColumn":33},{"ruleId":"175","severity":1,"message":"176","line":10,"column":5,"nodeType":"177","messageId":"178","endLine":17,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":19},{"ruleId":"175","severity":1,"message":"176","line":10,"column":5,"nodeType":"177","messageId":"178","endLine":17,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":19},{"ruleId":"175","severity":1,"message":"176","line":10,"column":5,"nodeType":"177","messageId":"178","endLine":17,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":19},{"ruleId":"171","severity":1,"message":"200","line":3,"column":20,"nodeType":"173","messageId":"174","endLine":3,"endColumn":24},{"ruleId":"171","severity":1,"message":"201","line":3,"column":27,"nodeType":"173","messageId":"174","endLine":3,"endColumn":30},{"ruleId":"171","severity":1,"message":"202","line":3,"column":33,"nodeType":"173","messageId":"174","endLine":3,"endColumn":36},{"ruleId":"171","severity":1,"message":"199","line":3,"column":38,"nodeType":"173","messageId":"174","endLine":3,"endColumn":44},{"ruleId":"171","severity":1,"message":"203","line":5,"column":10,"nodeType":"173","messageId":"174","endLine":5,"endColumn":15},{"ruleId":"171","severity":1,"message":"204","line":7,"column":10,"nodeType":"173","messageId":"174","endLine":7,"endColumn":18},{"ruleId":"171","severity":1,"message":"205","line":27,"column":15,"nodeType":"173","messageId":"174","endLine":27,"endColumn":19},{"ruleId":"175","severity":1,"message":"176","line":10,"column":5,"nodeType":"177","messageId":"178","endLine":17,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":19},{"ruleId":"175","severity":1,"message":"176","line":10,"column":5,"nodeType":"177","messageId":"178","endLine":17,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":19},{"ruleId":"175","severity":1,"message":"176","line":10,"column":5,"nodeType":"177","messageId":"178","endLine":17,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":16,"column":13,"nodeType":"181","messageId":"182","endLine":16,"endColumn":19},{"ruleId":"171","severity":1,"message":"187","line":9,"column":30,"nodeType":"173","messageId":"174","endLine":9,"endColumn":51},{"ruleId":"189","severity":1,"message":"190","line":129,"column":21,"nodeType":"173","messageId":"191","endLine":129,"endColumn":25},{"ruleId":"189","severity":1,"message":"192","line":145,"column":21,"nodeType":"173","messageId":"191","endLine":145,"endColumn":28},{"ruleId":"206","severity":1,"message":"207","line":219,"column":34,"nodeType":"208","messageId":"209","endLine":219,"endColumn":36},{"ruleId":"206","severity":1,"message":"207","line":230,"column":49,"nodeType":"208","messageId":"209","endLine":230,"endColumn":51},"no-unused-vars","'ADD_NEW_APP_CONFIGURATION' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-native-reassign",["210"],"no-negated-in-lhs",["211"],"'ACTIVE_STATUS_OPTIONS' is defined but never used.","'_' is defined but never used.","no-redeclare","'data' is already defined.","redeclared","'_typeof' is already defined.",["210"],["211"],"'Auth' is defined but never used.","'Component' is defined but never used.",["210"],["211"],"'Button' is defined but never used.","'Form' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'LOGIN' is defined but never used.","'postCall' is defined but never used.","'data' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]